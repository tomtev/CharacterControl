/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: bacon_master (https://sketchfab.com/bacon_master)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/gta-1-vice-city-upscaled-map-b2c10ab508744c5d9741db949037656a
Title: GTA 1: Vice City Upscaled Map
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { RigidBody, vec3 } from "@react-three/rapier";
import * as THREE from "three";

export function Model(props) {
  const { nodes, materials } = useGLTF("/gta.glb");
  console.log(nodes);

  for (const key in nodes) {
    if (nodes[key].material?.map)
      nodes[key].material.map.magFilter = THREE.NearestFilter;
    if (nodes[key].material?.map)
      nodes[key].material.map.minFilter = THREE.LinearMipMapLinearFilter;

    if (nodes[key].material?.transparent) {
      nodes[key].material.transparent = false;
      nodes[key].material.depthWrite = true;
      nodes[key].material.alphaTest = 0.2;
      nodes[key].renderOrder = -1;
    }
  }

  /* loop over nodes*/

  /*
  
  nodes.traverseVisible((obj) => {
    if (obj.material?.map) obj.material.map.magFilter = THREE.NearestFilter;
    if (obj.material?.map)
      obj.material.map.minFilter = THREE.LinearMipMapLinearFilter;

    if (obj.material?.transparent) {
      obj.material.transparent = false;
      obj.material.depthWrite = true;
      obj.material.alphaTest = 0.2;
      obj.renderOrder = -1;
    }
  }); */

  return (
    <RigidBody type="fixed" colliders={"trimesh"}>
  <group {...props} dispose={null}>
      <group scale={4} position={[0,-20,0]}>
        <group
          position={[-133.313, 0, 128.279]}
          rotation={[-Math.PI / 2, 0, 0]}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.pCube1_GTAUpscaled_Tex_0.geometry}
            material={materials.GTAUpscaled_Tex}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.pCube1_GTAUpscaled_Tex_0_1.geometry}
            material={materials.GTAUpscaled_Tex}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.pCube1_GTAUpscaled_Tex_0_2.geometry}
            material={materials.GTAUpscaled_Tex}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.pCube1_GTAUpscaled_Tex_0_3.geometry}
            material={materials.GTAUpscaled_Tex}
          />

          {/* Water? */}
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.pCube1_GTAUpscaled_Tex_0_4.geometry}
            material={materials.GTAUpscaled_Tex}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.pCube1_GTAUpscaled_Tex_0_5.geometry}
            material={materials.GTAUpscaled_Tex}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.pCube1_GTAUpscaled_Tex_0_6.geometry}
            material={materials.GTAUpscaled_Tex}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.pCube1_GTAUpscaled_Tex_0_7.geometry}
            material={materials.GTAUpscaled_Tex}
          />
        </group>

        {/*all stuff*/}
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.pCube2_GTAUpscaled_Tex_0.geometry}
          material={materials.GTAUpscaled_Tex}
          position={[-133.313, 0, 128.279]}
          rotation={[-Math.PI / 2, 0, 0]}
        />
      </group>
    </group>
    </RigidBody>

  );
}

useGLTF.preload("/gta.glb");
