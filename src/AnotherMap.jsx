/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 model.glb --transform 
Files: model.glb [459.31MB] > model-transformed.glb [44.28MB] (90%)
*/

import React, { useRef } from "react";
import {
  useGLTF,
  MeshReflectorMaterial,
  MeshWobbleMaterial,
  MeshTransmissionMaterial,
} from "@react-three/drei";
import { RigidBody } from "@react-three/rapier";
import * as THREE from "three";
import { extend } from "@react-three/fiber";

export function Model(props) {
  const { nodes, materials } = useGLTF("/model-transformed.glb");
  for (const key in nodes) {
    if (nodes[key].material?.map) {
      nodes[key].material.map.magFilter = THREE.NearestFilter;
      nodes[key].material.map.minFilter = THREE.LinearMipMapLinearFilter;
    }

    if (nodes[key].material?.transparent) {
      nodes[key].material.transparent = false;
      nodes[key].material.depthWrite = true;
      nodes[key].material.alphaTest = 0.2;
      nodes[key].renderOrder = -1;
    }
  }
  return (
    <group {...props} dispose={null} position={[0, -50, 0]}>
      <RigidBody type="fixed" colliders={"trimesh"}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Stone.geometry}
          material={materials.Stone}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Polished_Granite.geometry}
          material={materials.Polished_Granite}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Oak_Planks.geometry}
          material={materials.Oak_Planks}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Stationary_Lava.geometry}
          material={materials.Stationary_Lava}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Quartz_Slab.geometry}
          material={materials.Quartz_Slab}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Iron_Door.geometry}
          material={materials.Iron_Door}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Clay.geometry}
          material={materials.Clay}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Hopper.geometry}
          material={materials.Hopper}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sea_Lantern.geometry}
          material={materials.Sea_Lantern}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Lantern.geometry}
          material={materials.Lantern}
        />

        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Double_Waxed_Exposed_Cut_Copper_Slab.geometry}
          material={materials.Double_Waxed_Exposed_Cut_Copper_Slab}
        />

        <mesh
          receiveShadow
          
          geometry={nodes.Stationary_Water.geometry}
          position={[0, 0, 0]}
        >
          <meshPhongMaterial color={'darkblue'} transparent={true} opacity={.9} />
        </mesh>

        <mesh
        castShadow
        receiveShadow
        geometry={nodes.Bamboo_Sapling.geometry}
        material={materials.Bamboo_Sapling}
      />
      {/* 
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Stationary_Water.geometry}
        >
          <MeshTransmissionMaterial transmissionSampler={true}  roughness={0.2} />
        </mesh>*/}
      </RigidBody>

      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Lily_Pad.geometry}
        material={materials.Lily_Pad}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Honeycomb_Block.geometry}
        material={materials.Honeycomb_Block}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Medium_Amethyst_Bud.geometry}
        material={materials.Medium_Amethyst_Bud}
      />

      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Bubble_Column.geometry}
        material={materials.Bubble_Column}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Glass.geometry}
        material={
          new THREE.MeshPhongMaterial({
            color: "lightblue",
            transparent: true,
            opacity: 0.05,
          })
        }
      />
    </group>
  );
}

useGLTF.preload("/model-transformed.glb");
